using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Microsoft.CodeAnalysis;

namespace PillarOfPillar;

/// <summary>
/// A class that help SourceGenerator build C# files.
/// </summary>
public class CSharpBuilder
{
    public const string DefaultNewLine = "\n";

    /// <summary>
    /// String that used as indent.
    /// 4 space as default.
    /// </summary>
    public string IndentString { get; set; } = new string(' ', 4);
    
    private LinkedList<object> HeadLines { get; } = [];
    private LinkedList<object> BodyLines { get; } = [];
    private LinkedList<object> EndLines { get; } = [];

    private class EnterIndent
    {
        public static readonly EnterIndent Instance = new();
        private EnterIndent(){}
    }

    private class ExitIndent
    {
        public static readonly ExitIndent Instance = new();
        private ExitIndent(){}
    }

    public CSharpBuilder(bool emitAutoGeneratedComment = true)
    {
        if (emitAutoGeneratedComment)
        {
            HeadLines.AddFirst("// <auto-generated/>");
        }
    }

    /// <summary>
    /// Enter namespace of symbol,you needless to exit it.
    /// </summary>
    public void EnterNamespace(ISymbol? targetSymbol)
    {
        List<INamespaceSymbol> symbols = [];
        targetSymbol = targetSymbol?.ContainingNamespace;
        while (targetSymbol != null)
        {
            symbols.Add((INamespaceSymbol)targetSymbol);
            targetSymbol = targetSymbol.ContainingNamespace;
        }

        symbols.Reverse();
        foreach (var symbol in symbols)
        {
            if (symbol.IsGlobalNamespace)
            {
                continue;
            }
            PutHeadAndEndWithIndent($"namespace {symbol.Name}\n{{","}");
        }
    }
    
    /// <summary>
    /// Enter class of symbol,you needless to exit it.
    /// You should call <see cref="EnterNamespace"/> first.
    /// </summary>
    public void EnterNamedType(ISymbol? targetSymbol,string strAtRight = "")
    {
        List<INamedTypeSymbol> symbols = [];
        targetSymbol = targetSymbol?.ContainingType;
        while (targetSymbol != null)
        {
            symbols.Add((INamedTypeSymbol)targetSymbol);
            targetSymbol = targetSymbol.ContainingType;
        }

        var index = 0;
        symbols.Reverse();
        foreach (var symbol in symbols)
        {
            index++;
            PutHeadAndEndWithIndent(
                index == symbols.Count
                    ? $"partial class {symbol.Name} {strAtRight}\n{{"
                    : $"partial class {symbol.Name}\n{{", "}");
        }
    }

    /// <summary>
    /// Split string into lines.
    /// </summary>
    public static string[] SplitIntoLines(string str)
    {
        str = str.Replace("\r\n", "\n").Replace("\r", "\n");
        return str.Split(['\n'], StringSplitOptions.None).Select(s => s.TrimEnd()).ToArray();
    }

    /// <summary>
    /// Open an indent and close it in the beginning and the ending.
    /// You can call it when you want output code like `class Foo {` and `}`.
    /// </summary>
    public void PutHeadAndEndWithIndent(string head, string end)
    {
        foreach (var line in SplitIntoLines(head))
        {
            HeadLines.AddLast(line);
        }
        HeadLines.AddLast(EnterIndent.Instance);
        
        foreach (var line in SplitIntoLines(end))
        {
            EndLines.AddFirst(line);
        }
        EndLines.AddFirst(ExitIndent.Instance);
    }

    /// <summary>
    /// Put string into the body.
    /// </summary>
    /// <param name="body"></param>
    public void PutBody(string body)
    {
        foreach (var line in SplitIntoLines(body))
        {
            BodyLines.AddLast(line);
        }
    }
    
    /// <summary>
    /// Put string into the body with a level indent more.
    /// </summary>
    public void PutBodyWithIndent(string str)
    {
        BodyLines.AddLast(EnterIndent.Instance);
        foreach (var line in SplitIntoLines(str))
        {
            BodyLines.AddLast(line);
        }
        BodyLines.AddLast(ExitIndent.Instance);
    }

    public override string ToString()
    {
        StringBuilder builder = new();
        byte indentLevel = 0;

        foreach (var lines in (LinkedList<object>[])[HeadLines, BodyLines, EndLines])
        {
            foreach (var line in lines)
            {
                if (line is string)
                {
                    Indent();
                    builder.Append(line);
                    builder.Append(DefaultNewLine);
                }
                else if (line is EnterIndent)
                {
                    indentLevel += 1;
                }
                else if (line is ExitIndent)
                {
                    indentLevel -= 1;
                }
                else
                {
                    throw new ArgumentException($"Unknown type to take operation:{line.GetType().FullName}");
                }
            }
        }

        return builder.ToString().Replace("\t", IndentString);
        
        void Indent()
        {
            builder.Append(
                string.Concat(Enumerable.Repeat(IndentString, indentLevel)));
        }
    }
}